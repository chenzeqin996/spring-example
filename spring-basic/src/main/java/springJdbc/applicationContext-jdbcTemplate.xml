<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	
	<!-- spring 引入properties文件，然后可以用${xxx}方式使用properties的变量 
		因为该bean不需要创建对象，所以不需要id
	-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>
	
	<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>	
	
	<!-- <bean id="personDao" class="jdbcTemplate.PersonDao">
		<property name="dataSource">	
			<ref bean="dataSource"/>
		</property>
	</bean> -->
	
	<!-- 根据JdbcTemplate源码可知道，JdbcTemplate提供了一个构造方法给DataSource赋值 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource"></constructor-arg>
	</bean>
	
	<bean id="personDao2" class="jdbcTemplate_demo.PersonDao2">
		<property name="jdbcTemplate">	
			<ref bean="jdbcTemplate"/>
		</property>
	</bean>
</beans>    